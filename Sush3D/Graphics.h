#pragma once

/*Sush3D

Made by SupersushiMega with help of javidx9 code-It-Yourself 3D Graphics Engine youtube series

Textures must be in a 24Bit Bitmap format (Bitmaps of textures made with blenders material editor must have the principled shader node before matrial output node)

*/

#include <Windows.h>
#include <d2d1.h>
#include <d2d1_1.h>
#include <vector>
#include <fstream>
#include <strstream>
#include <thread>

using namespace std;

class Graphics
{
	ID2D1Factory* factory;
	ID2D1HwndRenderTarget* rendertarget;
	ID2D1SolidColorBrush* Solidbrush;

	SYSTEM_INFO systemInfo;

	std::thread refreshThread;	//thread used for image refreshing
	bool refreshthreadComplete = true;	//variable used to check if detached refresh thread is finished

	float* Alpha_DepthBuffer;	//Buffer for alpha and depth values

public:

	float fov = 90.0f;
	float ViewingDist = 1000.0f;
	float DistfromScreen = 0.5f;
	float aspect = 0.0f;
	float XYcoef = 0.0f;

	Graphics();
	~Graphics();

	struct matrix4x4
	{
		float mat[4][4] = { 0 };
	};

	matrix4x4 ProjMatrix;

	struct Color
	{
		float r = 1.0f;
		float g = 1.0f;
		float b = 1.0f;
		float a = 1.0f;
	};

	class ImageBuff
	{
		public:
			ImageBuff(uint16_t Width, uint16_t Height);
			~ImageBuff();
			void PutPix(uint16_t &x, uint16_t &y, Color &col);
			Color GetPix(uint16_t& x, uint16_t& y);

			uint32_t* PixelsPtr = nullptr;	//Pointer for the list of pixels where the picture is being built
			uint32_t* SecPixelsPtr = nullptr;	//pointer to the list of pixels which are used in the refresh process
			uint16_t width = 0;
			uint16_t height = 0;
	};

	class Alpha_DepthBuff
	{
		public:
			Alpha_DepthBuff(uint16_t Width, uint16_t Height);
			~Alpha_DepthBuff();
			void putDepth(uint16_t& x, uint16_t& y, float& Depth);
			void putAlpha(uint16_t& x, uint16_t& y, float& Alpha);

			float getDepth(uint16_t& x, uint16_t& y);
			float getAlpha(uint16_t& x, uint16_t& y);

			float* DepthPtr = nullptr;
			float* AlphaPtr = nullptr;

			uint16_t width = 0;
			uint16_t height = 0;
	};

	struct Point
	{
		uint16_t x = 0;
		uint16_t y = 0;
	};

	struct vec2D
	{
		float u = 0.0f;
		float v = 0.0f;
		float w = 1.0f;
	};

	struct vec3D
	{
		float x = 0.0f;
		float y = 0.0f;
		float z = 0.0f;
		float w = 1.0f;
	};

	struct triangle
	{
		vec3D vectors[3];
		vec2D texCoord[3];
		Color color = {1.0f, 1.0f, 0.0f, 1.0f};
	};

	struct mesh
	{
		vector<triangle> tri;

		vec3D WorldPos = { 0.0f, 0.0f, 0.0f };
		vec3D rotation = { 0.0f, 0.0f, 0.0f };
		
		bool LoadFromObj(string filename);	//Load 3D modell from OBJ file. Must have UV data
	};


	struct GlobalLight
	{
		vec3D Direction = { 0.0f, 0.0f, -1.0f };
		Color color = { 1.0f, 1.0f, 1.0f };
		float strength = 1.0f;
	};

	struct Camera
	{
		vec3D LocalPosDelta = { 0.0f };
		vec3D GlobalPos = {0.0f};
		vec3D Rotation = {0.0f, 0.0f, 1.0f};
		vec3D TargetRot = { 0.0f, 0.0f, 1.0f };
	};

	struct resolution
	{
		uint16_t width = 0;
		uint16_t height = 0;
	};

	struct BitMap
	{
		resolution MapResolution;
		vector<vector<Color>> Pixels;

		bool LoadBitmapRGB(const char* filename);	//Load 24bit Bitmap for RGB values

		bool LoadBitmapAlpha(const char* filename);	//Load 24bit Bitmap for Alpha values. The alpha value will be the average of the R, G and B values. (Has to be equal in size to RGB equivalent)	(if no Alpha map has been loaded all Alpha is set to max(Not see through))
	};


	resolution Resolution;

	GlobalLight globalLight;

	Camera camera;

	vec3D UpVec = { 0.0f, -1.0f, 0.0f };

public:
	//Calculation functions
	//==========================================================================================================================
	class CalcFunc
	{
		public:
			vec3D MatrixVectorMultiplication(vec3D& inputVec, matrix4x4& matrix);
			void MatrixMatrixMultiplication(matrix4x4& matrix1, matrix4x4& matrix2, matrix4x4& output);
			void MatrixInvertQuick(matrix4x4& matrixIn, matrix4x4& output);	//Only Rotation and Translation Matrices

			void MakeIdentityMarix(matrix4x4& output);
			void MakeZrotationMatrix(float& RadAngle, matrix4x4& output);
			void MakeXrotationMatrix(float& RadAngle, matrix4x4& output);
			void MakeYrotationMatrix(float& RadAngle, matrix4x4& output);
			void MakeTranslationMatrix(float x, float y, float z, matrix4x4& output);
			void MakeProjectionMatrix(float FovDeg, float Aspect, float DistFromScrn, float viewDist, matrix4x4& output);
			void MakePointAtMatrix(vec3D position, vec3D target, vec3D UPvec, matrix4x4& output);
			
			vec3D AddVectors(vec3D& vec1, vec3D& vec2);
			vec3D SubVectors(vec3D& vec1, vec3D& vec2);
			vec3D MultVectorFloat(vec3D& vec1, float& mult);	//Multiplies a vector by a float
			vec3D MultVectorVector(vec3D& vec1, vec3D& mult);	//Multiplies two vectors
			vec3D DivVector(vec3D& vec1, float& div);

			float DotProduct(vec3D& vec1, vec3D& vec2);
	
			float VectorLength(vec3D& vec);
			vec3D Normalise(vec3D& vec);
			vec3D CrossProd(vec3D& vec1, vec3D& vec2);

			vec3D PlaneIntersect(vec3D& PlanePoint, vec3D& PlaneNormal, vec3D& StartOfLine, vec3D& EndOfLine, float& t);

			uint16_t TrianglePlaneClip(vec3D PlanePoint, vec3D PlaneNormal, triangle& InputTriangle, triangle& OutputTriangle1, triangle& OutputTriangle2);
	};
	//==========================================================================================================================

	//Draw functions
	//==========================================================================================================================
	private:
		void BeginDraw()
		{
			rendertarget->BeginDraw();
		}

		void EndDraw()
		{
			rendertarget->EndDraw();
		}



public:

	//2D:
	void DrawPixel(uint16_t&x, uint16_t&y, Color &col, ImageBuff& imageBuff);	//draw pixels
	void DrawLine(Point& p1, Point& p2, Color& col, ImageBuff& imageBuff);	//draw a line
	void DrawTriangle(triangle Triangle, Color color, ImageBuff& imageBuff);	//Draw a unfilled triangle
	void DrawTrianglefilled(triangle &Triangle, Color &color, ImageBuff& imageBuff, Alpha_DepthBuff& AlphaDepthBuff);	//draw a triangle in solid color
	void DrawTriangletextured(triangle& Triangle, BitMap& texture, ImageBuff& imageBuff, Alpha_DepthBuff& AlphaDepthBuff);	//draw a textured triangle
	void DrawBMP(BitMap& bmp, uint16_t StartX, uint16_t StartY, ImageBuff& imageBuff, Alpha_DepthBuff& AlphaDepthBuff);	//draw a 24bit Bitmap

	void DrawChar(char letter, uint16_t x, uint16_t y, uint8_t scaleX, uint8_t scaleY, Color& col, ImageBuff& imageBuff);	//draw a single letter
	void DrawString(string String, uint16_t startX, uint16_t startY, Color& col, ImageBuff& imageBuff, uint8_t scaleX = 8, uint8_t scaleY = 15);	//draw string
	
	//3D:
	void DrawSprite3D(BitMap& sprite, vec3D& WorldPos, ImageBuff& imageBuff, Alpha_DepthBuff& AlphaDepthBuff, uint16_t sizeX, uint16_t sizeY);	//Draws a 2D sprite in 3D space, similar to Wolfenstein3D or the original Doom. if size values are 0 image resolution will be used

	void DrawMesh(mesh Mesh, Color color, ImageBuff& imageBuff);	//Draw a wireframe
	void DrawMeshFilled(mesh Mesh, Color color, ImageBuff& imageBuff, Alpha_DepthBuff& AlphaDepthBuff);	//draw mesh in solid color
	void DrawMeshTextured(mesh Mesh, BitMap& texture, ImageBuff& imageBuff, Alpha_DepthBuff& AlphaDepthBuff);	//draw mesh textured

	//Other
	void ClearScreen(float r, float g, float b, ImageBuff& imageBuff, Alpha_DepthBuff& AlphaDepthBuff);	//clear window to specified color
	void refresh(ImageBuff& imageBuff, uint16_t& fpsCntr);	//refresh window
	class RefreshThreadProc
	{
		public:
			void refresh(ID2D1HwndRenderTarget* rendertarget, ImageBuff& imageBuff, bool& isFinishedBool);
	};
	//==========================================================================================================================

	//Other functions
	//==========================================================================================================================
	bool Init(HWND windowHandle, uint16_t width, uint16_t height, float FOV, float DistancefromScreen, float ViewingDistance);	//initialise the window
	//==========================================================================================================================

	//Letters
	//==========================================================================================================================

	/*******************************************************************************
	* font
	* filename: unsaved
	* name: Font
	* family: Fixedsys
	* size: 8
	* style: Normal
	* included characters:  !"#$%&'()*+,-./0123456789:;<=>?\x0040ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
	* antialiasing: no
	* type: monospaced
	* encoding: ASMO-708
	* unicode bom: no
	*
	* preset name: Monochrome
	* data block size: 8 bit(s), uint8_t
	* RLE compression enabled: no
	* conversion type: Monochrome, Diffuse Dither 119
	* bits per pixel: 1
	*
	* preprocess:
	*  main scan direction: top_to_bottom
	*  line scan direction: forward
	*  inverse: no
	*******************************************************************************/

	const uint8_t Font[95][15] =
	{
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xc3, 0xe7, 0xe7, 0xff, 0xe7, 0xe7, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x99, 0x99, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc9, 0xc9, 0x80, 0xc9, 0xc9, 0xc9, 0x80, 0xc9, 0xc9, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xe7, 0xe7, 0xc3, 0x99, 0x9f, 0xcf, 0xe7, 0xf3, 0xf9, 0x99, 0xc3, 0xe7, 0xe7, 0xff
		},
		{
			0xff, 0xff, 0x8f, 0x27, 0x25, 0x89, 0xf3, 0xe7, 0xcf, 0x91, 0xa4, 0xe4, 0xf1, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc7, 0x93, 0x93, 0xc7, 0x9f, 0x90, 0x99, 0x99, 0xc4, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xe7, 0xe7, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xf3, 0xe7, 0xe7, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xe7, 0xe7, 0xf3, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xcf, 0xe7, 0xe7, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xe7, 0xe7, 0xcf, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xc9, 0xe3, 0x80, 0xe3, 0xc9, 0xff, 0xff, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xe7, 0x81, 0xe7, 0xe7, 0xff, 0xff, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xf3, 0xe7, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xf9, 0xf9, 0xf3, 0xf3, 0xe7, 0xe7, 0xcf, 0xcf, 0x9f, 0x9f, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xe1, 0xcc, 0xc8, 0xc8, 0xcc, 0xc4, 0xc4, 0xcc, 0xe1, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xf3, 0xe3, 0x83, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0xf9, 0xf3, 0xe7, 0xcf, 0x9f, 0x81, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0xf9, 0xe3, 0xf9, 0x99, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xcf, 0xcf, 0xc9, 0xc9, 0xc9, 0x99, 0x80, 0xf9, 0xf9, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x81, 0x9f, 0x9f, 0x9f, 0x83, 0xf9, 0xf9, 0xf3, 0x87, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xe3, 0xe7, 0xcf, 0x83, 0x99, 0x99, 0x99, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x81, 0xf9, 0xf3, 0xf3, 0xe7, 0xe7, 0xcf, 0xcf, 0xcf, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0x89, 0xc3, 0x91, 0x99, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0x99, 0x99, 0xc1, 0xf3, 0xe7, 0xc7, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xff, 0xff, 0xff, 0xe3, 0xe3, 0xf3, 0xe7, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xf9, 0xf3, 0xe7, 0xcf, 0x9f, 0xcf, 0xe7, 0xf3, 0xf9, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0x81, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x9f, 0xcf, 0xe7, 0xf3, 0xf9, 0xf3, 0xe7, 0xcf, 0x9f, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0xf3, 0xe7, 0xe7, 0xff, 0xe7, 0xe7, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x81, 0x3c, 0x3c, 0x30, 0x24, 0x24, 0x30, 0x3f, 0x80, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xe7, 0xc3, 0x99, 0x99, 0x99, 0x81, 0x99, 0x99, 0x99, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x83, 0x99, 0x99, 0x99, 0x83, 0x99, 0x99, 0x99, 0x83, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0x9f, 0x9f, 0x9f, 0x99, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x87, 0x93, 0x99, 0x99, 0x99, 0x99, 0x99, 0x93, 0x87, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x81, 0x9f, 0x9f, 0x9f, 0x83, 0x9f, 0x9f, 0x9f, 0x81, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x81, 0x9f, 0x9f, 0x9f, 0x83, 0x9f, 0x9f, 0x9f, 0x9f, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0x9f, 0x9f, 0x91, 0x99, 0x99, 0xc1, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x99, 0x99, 0x99, 0x99, 0x81, 0x99, 0x99, 0x99, 0x99, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0xf9, 0x99, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x99, 0x99, 0x93, 0x93, 0x87, 0x93, 0x93, 0x99, 0x99, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x9f, 0x81, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x9c, 0x9c, 0x88, 0x94, 0x94, 0x94, 0x9c, 0x9c, 0x9c, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x9c, 0x9c, 0x8c, 0x84, 0x90, 0x98, 0x9c, 0x9c, 0x9c, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x83, 0x99, 0x99, 0x99, 0x83, 0x9f, 0x9f, 0x9f, 0x9f, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc3, 0xf3, 0xf9, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x83, 0x99, 0x99, 0x99, 0x83, 0x93, 0x99, 0x99, 0x99, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0x99, 0x9f, 0xcf, 0xe7, 0xf3, 0xf9, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x81, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc3, 0xe7, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x9c, 0x9c, 0x9c, 0x94, 0x94, 0x94, 0xc9, 0xc9, 0xc9, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x99, 0x99, 0xcb, 0xe7, 0xe7, 0xd3, 0x99, 0x99, 0x99, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x99, 0x99, 0x99, 0x99, 0xc3, 0xe7, 0xe7, 0xe7, 0xe7, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x81, 0xf9, 0xf9, 0xf3, 0xe7, 0xcf, 0x9f, 0x9f, 0x81, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xc3
		},
		{
			0xff, 0xff, 0xff, 0x9f, 0x9f, 0xcf, 0xcf, 0xe7, 0xe7, 0xf3, 0xf3, 0xf9, 0xf9, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xc3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xc3
		},
		{
			0xff, 0xe7, 0xc3, 0x99, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00
		},
		{
			0xff, 0xc7, 0xe7, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xf9, 0xf9, 0xc1, 0x99, 0x99, 0xc1, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x9f, 0x9f, 0x83, 0x99, 0x99, 0x99, 0x99, 0x99, 0x83, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0x9f, 0x9f, 0x9f, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xf9, 0xf9, 0xc1, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc1, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0x81, 0x9f, 0x9f, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xe1, 0xcf, 0xcf, 0xcf, 0x81, 0xcf, 0xcf, 0xcf, 0xcf, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc1, 0xf9, 0xf9, 0x83
		},
		{
			0xff, 0xff, 0xff, 0x9f, 0x9f, 0x83, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xe7, 0xe7, 0xff, 0x87, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0x81, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xf3, 0xf3, 0xff, 0xc3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0xf3, 0x87
		},
		{
			0xff, 0xff, 0xff, 0x9f, 0x9f, 0x99, 0x99, 0x93, 0x87, 0x93, 0x99, 0x99, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x87, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0x81, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0x94, 0x94, 0x94, 0x94, 0x94, 0x9c, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc3, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x83, 0x99, 0x99, 0x99, 0x99, 0x99, 0x83, 0x9f, 0x9f, 0x9f
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc1, 0xf9, 0xf9, 0xf9
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x91, 0x8f, 0x9f, 0x9f, 0x9f, 0x9f, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0xc1, 0x9f, 0x9f, 0xc3, 0xf9, 0xf9, 0x83, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xcf, 0xcf, 0x81, 0xcf, 0xcf, 0xcf, 0xcf, 0xcf, 0xe1, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc1, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc3, 0xe7, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x9c, 0x94, 0x94, 0x94, 0x94, 0xc9, 0xc9, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x99, 0xc3, 0xe7, 0xc3, 0x99, 0x99, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0xc3, 0xf3, 0xe7, 0x0f
		},
		{
			0xff, 0xff, 0xff, 0xff, 0xff, 0x81, 0xf9, 0xf3, 0xe7, 0xcf, 0x9f, 0x81, 0xff, 0xff, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xf3, 0xe7, 0xe7, 0xe7, 0xcf, 0x9f, 0xcf, 0xe7, 0xe7, 0xe7, 0xf3, 0xff
		},
		{
			0xff, 0xff, 0xff, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7, 0xe7
		},
		{
			0xff, 0xff, 0xff, 0xcf, 0xe7, 0xe7, 0xe7, 0xf3, 0xf9, 0xf3, 0xe7, 0xe7, 0xe7, 0xcf, 0xff
		},
		{
			0xff, 0xff, 0xff, 0x8e, 0x24, 0x71, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
		}
	};
};
